VERSION CONTROL  版本控制
BEST PRACTICES   最优方法
COMMIT RELATED CHANGE 提交相互关联的变化
	A commit should be a wrapper for related
	changes. For example, fixing two different
	bugs should produce two separate commits.
	Small commits make it easier for other developers
	to understand the changes and roll
	them back if something went wrong.
	With tools like the staging area and the ability
	to stage only parts of a file, Git makes it
	easy to create very granular commits.
	相关更改的包装应该被提交。例如，修复两个不同的bug应该产生两个单独的提交。
	较小提交使其他开发人员更容易理解更改，并在出现错误时回头更改。
	使用分段区域之类的工具以及只对文件的部分进行分段的功能，
	Git使得创建非常微小的提交变得非常容易。
	
COMMIT OFTEN   经常性提交
	Committing often keeps your commits small
	and, again, helps you commit only related
	changes. Moreover, it allows you to share your
	code more frequently with others. That way
	it‘s easier for everyone to integrate changes
	regularly and avoid having merge conflicts.
	Having few large commits and sharing them
	rarely, in contrast, makes it hard to solve
	conflicts.
	常常提交使您的提交保持较小的规模，并且再次帮助您只提交相关的更改。
	此外，它允许您更频繁地与他人共享代码。
	这样，每个人都可以更容易地定期集成更改并避免合并冲突。
	相反，很少有大型提交，并且很少共享它们，这使得解决冲突非常困难。
	
DON‘T COMMIT HALF-DONE WORK  不要半途而废
	You should only commit code when it‘s
	completed. This doesn‘t mean you have
	to complete a whole, large feature before
	committing. Quite the contrary: split the
	feature‘s implementation into logical chunks
	and remember to commit early and often.
	But don‘t commit just to have something in
	the repository before leaving the office at the
	end of the day. If you‘re tempted to commit
	just because you need a clean working copy
	(to check out a branch, pull in changes, etc.)
	consider using Git‘s «Stash» feature instead.
	您应该只在代码完成时提交代码。这并不意味着您必须在提交之前完成整个大型功能。
	恰恰相反:将特性实现分割成逻辑块，并记住尽早且频繁地提交。
	但是，不要在一天结束离开办公室之前，只在存储库中提交一些内容。
	如果您只是因为需要一个干净的工作副本(签出一个分支、拉入更改等等)而想提交，
	那么可以考虑使用Git的Stash（隐藏）特性。
	
TEST CODE BEFORE YOU COMMIT 提交前测试代码
	Resist the temptation to commit something
	that you «think» is completed. Test it
	thoroughly to make sure it really is completed
	and has no side effects (as far as one can tell).
	While committing half-baked things in your
	local repository only requires you to forgive
	yourself, having your code tested is even more
	important when it comes to pushing/sharing
	your code with others.
	不要做你认为已经完成的事情。
	彻底地测试它，以确保它确实完成了，并且没有副作用(据我们所知)。
	虽然在本地存储库中提交不成熟的东西只需要您原谅自己，
	但是当涉及到推送/与他人共享代码时，对代码进行测试甚至更为重要。
	
WRITE GOOD COMMIT MESSAGES 编写较好的提交说明
	Begin your message with a short summary of
	your changes (up to 50 characters as a guideline).
	Separate it from the following body
	by including a blank line. The body of your
	message should provide detailed answers to
	the following questions:
	›› What was the motivation for the change?
	›› How does it differ from the previous
	implementation?
	Use the imperative, present tense («change»,
	not «changed» or «changes») to be consistent
	with generated messages from commands
	like git merge.
	以简短的变更摘要(最多50个字符作为指南)开始您的消息。
	通过包含空行将它与下面的主体分隔开。
	您的信息正文应该提供以下问题的详细答案:
	更改的动机是什么?
	它与以前的实现有何不同?
	使用祈使句、现在时(change, not changed or changes)与git merge等命令生成的消息保持一致。
	
VERSION CONTROL IS NOT  
A BACKUP SYSTEM        版本控制不是备份系统
	Having your files backed up on a remote
	server is a nice side effect of having a version
	control system. But you should not use your
	VCS like it was a backup system. When doing
	version control, you should pay attention to
	committing semantically (see «related changes
	») - you shouldn‘t just cram in files.
	在远程服务器上备份文件是版本控制系统的一个很好的副作用。
	但你不应该把风投当成备份系统来使用。
	在进行版本控制时，您应该注意语义上的提交(参见相关更改)——您不应该只是填入文件。
	
USE BRANCHES  使用分支
	Branching is one of Git‘s most powerful
	features - and this is not by accident: quick
	and easy branching was a central requirement
	from day one. Branches are the perfect tool
	to help you avoid mixing up different lines
	of development. You should use branches
	extensively in your development workflows:
	for new features, bug fixes, ideas…
	分支是Git最强大的特性之一，这并不是偶然的:从第一天开始，快速而简单的分支就是一个核心需求。
	分支是帮助您避免混淆不同开发线的完美工具。
	您应该在开发工作流中广泛地使用分支:用于新特性、bug修复和想法
	
AGREE ON A WORKFLOW 商定工作流程
	Git lets you pick from a lot of different workflows:
	long-running branches, topic branches,
	merge or rebase, git-flow… Which one
	you choose depends on a couple of factors:
	your project, your overall development and
	deployment workflows and (maybe most
	importantly) on your and your teammates‘
	personal preferences. However you choose to
	work, just make sure to agree on a common
	workflow that everyone follows.
	Git允许您从许多不同的工作流中进行选择:长时间运行的分支、主题分支、合并或重基、Git -flow，
	您选择哪个工作流取决于几个因素:您的项目、总体开发和部署工作流，
	以及(可能最重要的)您和您的队友的个人偏好。
	无论你选择什么工作，只要确保大家都同意一个通用的工作流程就可以了。
	
HELP & DOCUMENTATION 帮助&文档
	Get help on the command line
	$ git help <command>

FREE ONLINE RESOURCES 免费的在线资源
	http://www.git-tower.com/learn
	http://rogerdudler.github.io/git-guide/
	http://www.git-scm.org/